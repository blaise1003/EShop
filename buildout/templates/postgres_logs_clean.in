#!${buildout:executable}
import os, re, datetime, gzip


LOG_DIR = '${postgresql-init:datadir}/${config:pg_log_directory}'
LOG_FILE_PATTERN = re.compile(
    r'^postgresql-server-'
    r'([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})'
    r'(|[+-]{1}[0-9]{4})\.log(?:|\.gz)$'
)
NOW = datetime.datetime.utcnow()
COMPRESS_DEADLINE = NOW - datetime.timedelta(
    days = ${config:pg_log_compress_age}
)
DELETE_DEADLINE = NOW - datetime.timedelta(
    days = ${config:pg_log_delete_age}
)

print "Cleaning postgresql logs in %s..." % LOG_DIR
for file_ in os.listdir(LOG_DIR):
    m = LOG_FILE_PATTERN.match(file_)
    if m is not None:
        year, month, day, hour, minute, second, offset = m.groups()
        date = datetime.datetime(
            *[int(a) for a in [year, month, day, hour, minute]]
        )
        if offset != '':
            delta = datetime.timedelta(
                hours = int(offset[1:3]),
                minutes = int(offset[3:5])
            )
            if offset[0] == '+':
                date = date - delta
            else:
                date = date + delta
    full_path = os.path.join(LOG_DIR, file_)
    if date < DELETE_DEADLINE:
        print "Deleting %s..." % full_path
        os.remove(full_path)
    elif date < COMPRESS_DEADLINE:
        if file_.endswith('.log'):
            print "Compressing %s to %s..." % (full_path, full_path + '.gz')
            compressed_file = gzip.open(full_path + '.gz', 'wb')
            file_stream = open(full_path, 'rb')
            compressed_file.write(file_stream.read())
            compressed_file.close()
            file_stream.close()
            os.remove(full_path)
        else:
            print "Leaving %s unchanged..." % full_path
    else:
        print "Leaving %s unchanged